// Test script to verify Twilio and Railway backend integration
import TwilioVoiceService from './src/services/TwilioVoiceService.js';
import CallCenterApiService from './src/services/CallCenterApiService.js';

async function testIntegration() {
  console.log('üß™ Testing Vocelio CallCenter Integration...\n');

  // Test 1: Environment Variables
  console.log('1Ô∏è‚É£ Testing Environment Variables:');
  console.log('‚úÖ Twilio Account SID:', process.env.REACT_APP_TWILIO_ACCOUNT_SID ? '‚úì Present' : '‚ùå Missing');
  console.log('‚úÖ Twilio Auth Token:', process.env.REACT_APP_TWILIO_AUTH_TOKEN ? '‚úì Present' : '‚ùå Missing');
  console.log('‚úÖ Twilio Phone Number:', process.env.REACT_APP_TWILIO_PHONE_NUMBER || '‚ùå Missing');
  console.log('‚úÖ API Gateway:', process.env.REACT_APP_API_GATEWAY || '‚ùå Missing');
  console.log('‚úÖ Call Center API:', process.env.REACT_APP_CALL_CENTER_API || '‚ùå Missing');

  // Test 2: Backend API Health Check
  console.log('\n2Ô∏è‚É£ Testing Backend API Connection:');
  try {
    const apiService = new CallCenterApiService();
    const healthResponse = await apiService.apiRequest('/api/v1/system/health');
    
    if (healthResponse.success) {
      console.log('‚úÖ Backend API: Connected and responding');
      console.log('üìä Health Status:', healthResponse.data.status || 'healthy');
    } else {
      console.log('‚ö†Ô∏è  Backend API: Using mock data (API not available)');
    }
  } catch (error) {
    console.log('‚ùå Backend API Error:', error.message);
  }

  // Test 3: Twilio Service Initialization
  console.log('\n3Ô∏è‚É£ Testing Twilio Voice Service:');
  try {
    const twilioService = new TwilioVoiceService();
    console.log('‚úÖ Twilio Service: Created successfully');
    console.log('üîß Configuration Check:');
    console.log('  - Account SID: ' + (twilioService.config.accountSid ? '‚úì' : '‚ùå'));
    console.log('  - Auth Token: ' + (twilioService.config.authToken ? '‚úì' : '‚ùå'));
    console.log('  - Phone Number: ' + (twilioService.config.phoneNumber || '‚ùå Not configured'));
    console.log('  - API URL: ' + twilioService.config.apiUrl);
  } catch (error) {
    console.log('‚ùå Twilio Service Error:', error.message);
  }

  // Test 4: Analytics Endpoints
  console.log('\n4Ô∏è‚É£ Testing Analytics Endpoints:');
  try {
    const apiService = new CallCenterApiService();
    const analyticsResponse = await apiService.apiRequest('/api/v1/analytics');
    
    if (analyticsResponse.success) {
      console.log('‚úÖ Analytics API: Connected');
      console.log('üìà Sample Data:', JSON.stringify(analyticsResponse.data, null, 2));
    } else {
      console.log('‚ö†Ô∏è  Analytics API: Using mock data');
    }
  } catch (error) {
    console.log('‚ùå Analytics API Error:', error.message);
  }

  console.log('\nüéØ Integration Test Complete!');
  console.log('üí° If you see mock data, the system will work in development mode.');
  console.log('üöÄ For production calls, ensure all Twilio credentials are correct.');
}

// Export for manual testing
export { testIntegration };

console.log('üìû CallCenter Integration Test Ready');
console.log('To run: import { testIntegration } from "./test-integration.js"; testIntegration();');
